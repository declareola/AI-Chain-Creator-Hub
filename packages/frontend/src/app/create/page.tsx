'use client';

import { useState } from 'react';

export default function CreatePage() {
  const [aiPrompt, setAiPrompt] = useState('');
  const [selectedStyle, setSelectedStyle] = useState('Realistic');
  const [imageSize, setImageSize] = useState('512x512');
  const [batchCount, setBatchCount] = useState(1);
  const [advancedOptions, setAdvancedOptions] = useState({
    creativity: 0.7,
    detail: 0.8,
    colorPalette: 'Vibrant'
  });
  const [nftTitle, setNftTitle] = useState('Cyberpunk Cat #42');
  const [description, setDescription] = useState('A one-of-a-kind cyborg feline, prowling the neon-drenched alleys of a futuristic metropolis. Generated by Artify AI.');
  const [royalties, setRoyalties] = useState(10);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedImages, setGeneratedImages] = useState<string[]>([]);

  const styles = ['Realistic', 'Abstract', 'Anime', 'Cyberpunk', 'Fantasy', 'Minimalist'];
  const sizes = ['256x256', '512x512', '1024x1024'];
  const colorPalettes = ['Vibrant', 'Muted', 'Monochrome', 'Pastel'];

  const handleGenerate = async () => {
    if (!aiPrompt.trim()) {
      alert('Please enter an AI prompt');
      return;
    }

    setIsGenerating(true);
    // Simulate generation
    setTimeout(() => {
      const newImages = Array.from({ length: batchCount }, (_, i) =>
        `https://via.placeholder.com/512x512?text=Generated+Image+${i + 1}`
      );
      setGeneratedImages(newImages);
      setIsGenerating(false);
    }, 3000);
  };

  const handleMint = () => {
    if (generatedImages.length === 0) {
      alert('Please generate images first');
      return;
    }
    alert('NFT minted successfully!');
  };

  return (
    <main className="flex flex-1 justify-center py-12">
      <div className="w-full max-w-6xl px-4">
        <div className="grid grid-cols-1 gap-12 lg:grid-cols-2">
          <div className="flex flex-col gap-8">
            <div>
              <h1 className="text-4xl font-bold tracking-tighter text-white sm:text-5xl">
                Create your NFT
              </h1>
              <p className="mt-4 text-lg text-gray-400">
                Unleash your creativity with our AI-powered NFT generator.
                Describe your vision and watch it come to life.
              </p>
            </div>

            {/* AI Prompt */}
            <div className="space-y-4">
              <label className="block">
                <span className="text-base font-medium text-white">AI Art Prompt</span>
                <textarea
                  className="form-textarea min-h-36 w-full resize-none rounded-xl border-none bg-[#2a342b] p-4 text-base text-white placeholder:text-gray-500 focus:border-[#53d22d] focus:ring-[#53d22d]"
                  placeholder="e.g., 'A hyperrealistic portrait of a cyborg cat in a neon-lit cyberpunk city'"
                  value={aiPrompt}
                  onChange={(e) => setAiPrompt(e.target.value)}
                />
              </label>
            </div>

            {/* Style and Size */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-base font-medium text-white mb-2">Art Style</label>
                <select
                  className="form-select w-full rounded-xl border-none bg-[#2a342b] p-4 text-base text-white focus:border-[#53d22d] focus:ring-[#53d22d]"
                  value={selectedStyle}
                  onChange={(e) => setSelectedStyle(e.target.value)}
                >
                  {styles.map(style => (
                    <option key={style} value={style}>{style}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-base font-medium text-white mb-2">Image Size</label>
                <select
                  className="form-select w-full rounded-xl border-none bg-[#2a342b] p-4 text-base text-white focus:border-[#53d22d] focus:ring-[#53d22d]"
                  value={imageSize}
                  onChange={(e) => setImageSize(e.target.value)}
                >
                  {sizes.map(size => (
                    <option key={size} value={size}>{size}</option>
                  ))}
                </select>
              </div>
            </div>

            {/* Advanced Options */}
            <div className="bg-[#1c241d] rounded-xl p-6">
              <h3 className="text-white text-lg font-semibold mb-4">Advanced Options</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-white mb-2">
                    Creativity Level: {advancedOptions.creativity}
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="1"
                    step="0.1"
                    value={advancedOptions.creativity}
                    onChange={(e) => setAdvancedOptions(prev => ({ ...prev, creativity: parseFloat(e.target.value) }))}
                    className="w-full"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-white mb-2">
                    Detail Level: {advancedOptions.detail}
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="1"
                    step="0.1"
                    value={advancedOptions.detail}
                    onChange={(e) => setAdvancedOptions(prev => ({ ...prev, detail: parseFloat(e.target.value) }))}
                    className="w-full"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-white mb-2">Color Palette</label>
                  <select
                    className="form-select w-full rounded-xl border-none bg-[#2a342b] p-3 text-base text-white focus:border-[#53d22d] focus:ring-[#53d22d]"
                    value={advancedOptions.colorPalette}
                    onChange={(e) => setAdvancedOptions(prev => ({ ...prev, colorPalette: e.target.value }))}
                  >
                    {colorPalettes.map(palette => (
                      <option key={palette} value={palette}>{palette}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>

            {/* Batch Generation */}
            <div>
              <label className="block text-base font-medium text-white mb-2">Batch Count</label>
              <input
                type="number"
                min="1"
                max="10"
                value={batchCount}
                onChange={(e) => setBatchCount(parseInt(e.target.value))}
                className="form-input w-full rounded-xl border-none bg-[#2a342b] p-4 text-base text-white focus:border-[#53d22d] focus:ring-[#53d22d]"
              />
              <p className="text-gray-400 text-sm mt-1">Generate multiple variations at once</p>
            </div>

            <button
              className="flex h-12 w-full items-center justify-center rounded-full bg-[#53d22d] px-6 text-base font-bold text-[#111812] transition-transform hover:scale-105 disabled:opacity-50"
              onClick={handleGenerate}
              disabled={isGenerating || !aiPrompt.trim()}
            >
              {isGenerating ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-[#111812] mr-2"></div>
                  Generating...
                </>
              ) : (
                <>
                  <span className="material-symbols-outlined mr-2">auto_awesome</span>
                  <span className="truncate">Generate Art &amp; Metadata</span>
                </>
              )}
            </button>
          </div>

          <div className="flex flex-col gap-6 rounded-2xl bg-[#1c241d] p-8">
            <h2 className="text-2xl font-bold tracking-tight text-white">
              NFT Details & Preview
            </h2>

            {/* Generated Images */}
            {generatedImages.length > 0 && (
              <div>
                <h3 className="text-white text-lg font-semibold mb-4">Generated Images</h3>
                <div className="grid grid-cols-2 gap-4 mb-6">
                  {generatedImages.map((img, index) => (
                    <img key={index} src={img} alt={`Generated ${index + 1}`} className="rounded-lg" />
                  ))}
                </div>
              </div>
            )}

            {/* Preview */}
            <div className="space-y-6">
              <div>
                <h3 className="text-white text-lg font-semibold">Preview</h3>
                <p className="text-gray-400 text-sm">Your generated art will appear below. You can then edit the details before minting.</p>
              </div>
              <div className="aspect-square w-full overflow-hidden rounded-2xl bg-[#2a342b]">
                <div className="h-full w-full bg-cover bg-center bg-no-repeat" style={{ backgroundImage: generatedImages.length > 0 ? `url(${generatedImages[0]})` : 'url("https://lh3.googleusercontent.com/aida-public/AB6AXuApFNMjuColPW9P7Iomfd-2dBNY2vCwcEuAlscg1c2JS6ZW47r02fhdk_AwiZeVH7G-PTDKq6-yXvuZUNyJamquH-fj4y9eRrtUNoAZ_aghsif12t1EX0F4qJKxp79ZuR0sdji0BAlINVdIQpqAlEC7Mr7vfPa7cGosm8kXNMFr5uUkXGjBJ5wkTrrTGCKY57JJF4O1PeViT2ieG8xMYByKy2CSqu3uvFy-muG73XmSGU4hFgnf_JCCYXQixcr6QohArSa4gLCn1Dr3Dr3")' }}></div>
              </div>
            </div>

            {/* NFT Details Form */}
            <div className="space-y-4">
              <label className="flex flex-col gap-2">
                <span className="text-base font-medium text-white">NFT Title</span>
                <input
                  className="form-input h-14 w-full flex-1 resize-none rounded-xl border-none bg-[#2a342b] p-4 text-base text-white placeholder:text-gray-500 focus:border-[#53d22d] focus:ring-[#53d22d]"
                  value={nftTitle}
                  onChange={(e) => setNftTitle(e.target.value)}
                />
              </label>
              <label className="flex flex-col gap-2">
                <span className="text-base font-medium text-white">Description</span>
                <textarea
                  className="form-textarea min-h-24 w-full flex-1 resize-none rounded-xl border-none bg-[#2a342b] p-4 text-base text-white placeholder:text-gray-500 focus:border-[#53d22d] focus:ring-[#53d22d]"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                />
              </label>
              <label className="flex flex-col gap-2">
                <span className="text-base font-medium text-white">Royalties (%)</span>
                <input
                  className="form-input h-14 w-full flex-1 resize-none rounded-xl border-none bg-[#2a342b] p-4 text-base text-white placeholder:text-gray-500 focus:border-[#53d22d] focus:ring-[#53d22d]"
                  type="number"
                  value={royalties}
                  onChange={(e) => setRoyalties(parseInt(e.target.value))}
                />
              </label>
            </div>

            {/* Metadata */}
            <div className="flex flex-col gap-2">
              <h3 className="text-base font-medium text-white">Metadata JSON</h3>
              <div className="relative">
                <textarea
                  className="form-textarea h-48 w-full flex-1 resize-none rounded-xl border-none bg-[#2a342b] p-4 font-mono text-sm text-gray-300 focus:border-[#53d22d] focus:ring-[#53d22d]"
                  readOnly
                  value={`{
  "name": "${nftTitle}",
  "description": "${description}",
  "image": "ipfs://...",
  "attributes": [
    { "trait_type": "Style", "value": "${selectedStyle}" },
    { "trait_type": "Size", "value": "${imageSize}" },
    { "trait_type": "Creativity", "value": "${advancedOptions.creativity}" }
  ]
}`}
                />
                <button className="absolute top-3 right-3 text-gray-400 hover:text-white">
                  <span className="material-symbols-outlined">content_copy</span>
                </button>
              </div>
            </div>

            <button
              className="mt-4 flex h-14 w-full items-center justify-center rounded-full bg-[#53d22d] px-5 text-lg font-bold text-[#111812] transition-transform hover:scale-105 disabled:opacity-50"
              onClick={handleMint}
              disabled={generatedImages.length === 0}
            >
              <span className="truncate">Mint NFT</span>
            </button>
          </div>
        </div>
      </div>
    </main>
  );
}
